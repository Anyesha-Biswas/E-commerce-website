/** @jsxImportSource https://esm.sh/react@18.2.0 */
import React, { useState, useEffect } from "https://esm.sh/react@18.2.0";
import { createRoot } from "https://esm.sh/react-dom@18.2.0/client";

function EcommercePlatform() {
  const [products, setProducts] = useState([]);
  const [cart, setCart] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    const response = await fetch('/products');
    const data = await response.json();
    setProducts(data);
  };

  const addToCart = (product) => {
    const existingItem = cart.find(item => item.id === product.id);
    if (existingItem) {
      setCart(cart.map(item => 
        item.id === product.id 
          ? {...item, quantity: item.quantity + 1} 
          : item
      ));
    } else {
      setCart([...cart, {...product, quantity: 1}]);
    }
  };

  const removeFromCart = (productId) => {
    setCart(cart.filter(item => item.id !== productId));
  };

  const updateQuantity = (productId, newQuantity) => {
    if (newQuantity < 1) {
      removeFromCart(productId);
    } else {
      setCart(cart.map(item => 
        item.id === productId 
          ? {...item, quantity: newQuantity} 
          : item
      ));
    }
  };

  const calculateTotal = () => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0).toFixed(2);
  };

  const filteredProducts = products.filter(product => 
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.category.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const completeOrder = async () => {
    try {
      const response = await fetch('/order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          items: cart,
          total: calculateTotal(),
          timestamp: new Date().toISOString()
        })
      });

      if (response.ok) {
        alert('Order placed successfully! üéâ');
        setCart([]);
      }
    } catch (error) {
      console.error('Order failed:', error);
      alert('Order could not be processed.');
    }
  };

  return (
    <div className="ecommerce-platform">
      <header>
        <h1>üõçÔ∏è QuickShop</h1>
        <div className="product-search">
          <input 
            type="text" 
            placeholder="Search products..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </header>

      <div className="main-content">
        <div className="product-grid">
          {filteredProducts.map(product => (
            <div key={product.id} className="product-card">
              <h3>{product.name}</h3>
              <p>{product.description}</p>
              <p className="price">${product.price.toFixed(2)}</p>
              <p className="category">{product.category}</p>
              <button onClick={() => addToCart(product)}>Add to Cart</button>
            </div>
          ))}
        </div>

        <div className="shopping-cart">
          <h2>üõí Shopping Cart</h2>
          {cart.length === 0 ? (
            <p>Your cart is empty</p>
          ) : (
            <>
              {cart.map(item => (
                <div key={item.id} className="cart-item">
                  <span>{item.name}</span>
                  <div className="quantity-control">
                    <button onClick={() => updateQuantity(item.id, item.quantity - 1)}>-</button>
                    <span>{item.quantity}</span>
                    <button onClick={() => updateQuantity(item.id, item.quantity + 1)}>+</button>
                  </div>
                  <span>${(item.price * item.quantity).toFixed(2)}</span>
                  <button onClick={() => removeFromCart(item.id)}>Remove</button>
                </div>
              ))}
              <div className="cart-summary">
                <strong>Total: ${calculateTotal()}</strong>
                <button onClick={completeOrder}>Complete Purchase</button>
              </div>
            </>
          )}
        </div>
      </div>
      
      <a 
        href={import.meta.url.replace("esm.town", "val.town")} 
        target="_top" 
        style={{ color: '#666', textDecoration: 'none', fontSize: '0.8em' }}
      >
        View Source
      </a>
    </div>
  );
}

function client() {
  createRoot(document.getElementById("root")).render(<EcommercePlatform />);
}
if (typeof document !== "undefined") { client(); }

export default async function server(request: Request): Promise<Response> {
  const { sqlite } = await import("https://esm.town/v/stevekrouse/sqlite");
  const KEY = new URL(import.meta.url).pathname.split("/").at(-1);
  const SCHEMA_VERSION = 1;

  await sqlite.execute(`
    CREATE TABLE IF NOT EXISTS ${KEY}_products_${SCHEMA_VERSION} (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      description TEXT NOT NULL,
      price REAL NOT NULL,
      category TEXT NOT NULL,
      stock INTEGER NOT NULL
    )
  `);

  await sqlite.execute(`
    CREATE TABLE IF NOT EXISTS ${KEY}_orders_${SCHEMA_VERSION} (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      items TEXT NOT NULL,
      total REAL NOT NULL,
      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // Seed initial products if none exist
  const productCheck = await sqlite.execute(`SELECT COUNT(*) as count FROM ${KEY}_products_${SCHEMA_VERSION}`);
  if (productCheck.rows[0].count === 0) {
    const initialProducts = [
      { name: 'Wireless Headphones', description: 'Noise-cancelling bluetooth headphones', price: 129.99, category: 'Electronics', stock: 50 },
      { name: 'Leather Backpack', description: 'Stylish and durable leather backpack', price: 89.50, category: 'Accessories', stock: 30 },
      { name: 'Smart Watch', description: 'Fitness tracking smartwatch', price: 199.99, category: 'Electronics', stock: 25 },
      { name: 'Running Shoes', description: 'Comfortable athletic running shoes', price: 79.99, category: 'Sports', stock: 40 }
    ];

    for (const product of initialProducts) {
      await sqlite.execute(`
        INSERT INTO ${KEY}_products_${SCHEMA_VERSION} 
        (name, description, price, category, stock) 
        VALUES (?, ?, ?, ?, ?)
      `, [product.name, product.description, product.price, product.category, product.stock]);
    }
  }

  if (request.method === 'GET' && new URL(request.url).pathname === '/products') {
    const products = await sqlite.execute(`SELECT * FROM ${KEY}_products_${SCHEMA_VERSION}`);
    return new Response(JSON.stringify(products.rows), {
      headers: { 'Content-Type': 'application/json' }
    });
  }

  if (request.method === 'POST' && new URL(request.url).pathname === '/order') {
    const orderData = await request.json();
    await sqlite.execute(`
      INSERT INTO ${KEY}_orders_${SCHEMA_VERSION} 
      (items, total) 
      VALUES (?, ?)
    `, [
      JSON.stringify(orderData.items),
      orderData.total
    ]);
    return new Response(JSON.stringify({ message: 'Order placed successfully' }), {
      headers: { 'Content-Type': 'application/json' }
    });
  }

  return new Response(`
    <html>
      <head>
        <title>QuickShop</title>
        <style>${css}</style>
      </head>
      <body>
        <div id="root"></div>
        <script src="https://esm.town/v/std/catch"></script>
        <script type="module" src="${import.meta.url}"></script>
      </body>
    </html>
  `, {
    headers: { 'Content-Type': 'text/html' }
  });
}

const css = `
body {
  font-family: 'Arial', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f4f4f4;
}

.ecommerce-platform {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

header {
  background-color: #ffffff;
  padding: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 20px;
}

.product-search input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.main-content {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 20px;
}

.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 15px;
}

.product-card {
  background-color: white;
  border: 1px solid #eee;
  padding: 15px;
  text-align: center;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.product-card .price {
  font-weight: bold;
  color: #007bff;
}

.product-card .category {
  color: #6c757d;
  font-size: 0.9em;
}

.shopping-cart {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.cart-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #eee;
  padding: 10px 0;
}

.quantity-control {
  display: flex;
  align-items: center;
  gap: 10px;
}

.cart-summary {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 15px;
}

button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 8px 15px;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #0056b3;
}
`;
